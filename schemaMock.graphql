schema {
	mutation: Mutation
	query: Query
}

interface AdviseMessage {
    # Error code
    code: String!

    # Error type
    type: String!

    # Error description
    description: String!
}

interface BookableOptionSearch {
    # Access code of this option.
    accessCode: String!

    # Indicates the quote key
    id: String!
}

interface Priceable {
    # Specifies the currency.
    currency: Currency!
    
    code: ID!

    # Specifies the import.
    value: Float!
}

interface Response {
    # Application stats in string format
    stats(token: String!): RequestStats

    # Data sent & received in the supplierâ€™s native format.
    auditData: AuditData

    # Errors that will lead the service to abort
    errors: [Error!]

    # Potentially harmful situations or errors that won't force the service to abort
    warnings: [Warning!]
}

# In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: datetime: "2015-11-22T13:57:31.123Z".
scalar DateTime

#In queries or mutations, Date fields have to be specified in ISO 8601 format with enclosing double quotes: datetime: "2015-11-22".
scalar Date

#An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
scalar URI

#ISO 4217
scalar Currency

#ISO 3166-1 alpha-2
scalar Language

#ISO 3166-1 alpha-2
scalar Country

#json structure
scalar JSON

# The mutation type, represents all updates we can make to our data.
type Mutation {
    	hotelBook(input: HotelBookInput!, settings: HotelSettingsInput): HotelBookPayload
	hotelCancel(input: HotelCancelInput!, settings: HotelSettingsInput): HotelCancelPayload
}

# The query type, represents all of the entry points into our object graph.
type Query {
	# Available options for a given date and itinerary.
	search: Search!
	# Returns the total price and cancellation policies of the Option selected in the previous step (Search).
	quote: Quote!
	# Returns detailed information about books.
	booking: Booking
	
	# Returns status of the search service.
    	searchStatusService: ServiceStatus!
	# Returns status of the quote service.
    	quoteStatusService: ServiceStatus!
	# Returns status of the book service.
    	bookStatusService: ServiceStatus!
 	# Returns status of the book service.
    	cancelStatusService: ServiceStatus!
	# Returns status of the quote service.
    	bookingStatusService: ServiceStatus!
}

# Filter that selects the accesses which will be used in the availability. You must choose one of them, include or
# exclude, or the other alternative isn't specified anything.
# If input both, you will receive a validation error that indicates this error.
input AccessFilterInput {
   	# Indicates that accesses are used in this availability. Only will be used the accesses that are specified here.
   	includes: [ID!]

   	# By default are used all the accesses configured for the hub user, except which are included in this field.
   	excludes: [ID!]
}

# Access overwrites an existent access in our Back Office or creates a new
# one only for this availability. An access objetc contains its ow code, configuration and settings.
input AccessInput {
   	# The accessID used to identify the existing access in our Back Office to
   	# overwrite it. Acts as an identifier in this avail existing or not in
	# our Back Office.
	accessId: ID!

   	# Information required to access the supplierâ€™s system.
   	configuration: ConfigurationInput

   	# You can configure an special settings for any access. This level overwrites the avail and supplier settings levels.
   	settings: SettingsBaseInput
}

# Input BookPax contains basic information abaout pax like name, surname and age.
input BookPaxInput {
    # Guest's name
	# Guest's last name
	surname: String!

	# Guest's age
	age: Int!
}

# Reference object that contains the client reference and/or supplier reference.
input BookReferenceInput {
	# Client reference
	client: String

	# Supplier reference
	supplier: String
}

# Input BookRoom contains list of pax and the room's reference.
input BookRoomInput {
    # Rooms reference in the booking
    occupancyRefId: Int!

    # Lists of paxes of the room
	paxes: [BookPaxInput!]!
}

# List of business rules to filter the options that you are interested.
input BusinessRulesInput {
   	# Options quota per avail. Numbers of options wanted by avail.
   	optionsQuota: Int

   	# Different business rules to filter the options that you are interested.
   	businessRulesType: BusinessRulesType
}

# The information required to access the supplierâ€™s system.
input ConfigurationInput {
   	# User code to connect to supplier.
   	username: String

   	# Password for the connection.
   	password: String

   	# Specific Url provider's service.
        urls:           UrlsInput!

   	# List of parameters for additional information.
   	parameters: [ParameterInput!]

   	# Markets allowed for the access.
   	markets: [String!]
}

# Criteria by dates
input CriteriaBookingDatesInput {
    # Indicates the type of dates
    dateType: DateType!

    # Start date
    # Format: yyyy-MM-dd
    start: Date!

    # End date
    # Format: yyyy-MM-dd
    end: Date!
}

# Criteria by references
input CriteriaBookingReferencesInput {
    # Hotel code.
    hotelCode: String!

    # Currency requested.
    currency : Currency!

    # Contains the client reference and/or supplier reference.
    references: [BookReferenceInput!]!
}

# Input delta price, indicates price variation permitted by the client
input DeltaPriceInput {
	# Amount (in the currency returned into the option) that is accepted by the client to be higher than the valuation price.
	amount: Float

    # Percentage accepted by the client to be higher than the valuation price.
    percent: Float

    # Indicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client.
    applyBoth: Boolean!
}

# Expire Date
input ExpireDateInput{
    # Month MM
    month: Int!

    # Year yy
    year: Int!
}

# Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses.
# You must choose one of them, include or exclude, or the other alternative isn't specified anything.
# If input both, you will receive a validation error that indicates this error.
input FilterInput {
   	# You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.
   	access: AccessFilterInput!
}

# Holder object that contains the pax name and surname.
input HolderInput {
	# Holder's name
	name: String!

	# Holder's surname
	surname: String!
}

# Criteria of book.
input HotelBookInput {
	# Option ID
    optionRefId: String!

    # Language to be used in request.
    language: Language

    # Booking ID in clientâ€™s system.
    clientReference: String!

    # Indicates price variation permitted by the client.
    deltaPrice: DeltaPriceInput

    # If the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
    paymentCard: PaymentCardInput

    # Any customer comments for the supplier to consider
    remarks: String

    # Holder's basic information
    holder: HolderInput!

    # Rooms within this option
    rooms: [BookRoomInput!]!
}

# Criteria of Cancel.
input HotelCancelInput {
	# Name of the access that have to use in the request.
	accessCode: String!

	# Language code.
    language: Language

    # Hotel code.
    hotelCode: String!

    # Contains the client reference and/or supplier reference.
    # One of them is mandatory.
    reference: BookReferenceInput!
}

# Criteria of book contains basic information to find a book or books.
input HotelCriteriaBookingInput {
	# Name of the access that have to use in the request.
    accessCode: String!

    # Language code.
    language: Language

    # Criteria search type.
    typeSearch: BookingCriteriaType!

    # Criteria by references
    references: CriteriaBookingReferencesInput

    # Criteria by dates
    dates: CriteriaBookingDatesInput
}

# Criteria of quote contains the option reference id, blocks and language.
input HotelCriteriaQuoteInput {
	# Identifier of the option chosen in the search.
	optionRefId: String!

	# Indicates if you want to block the option selected in search, as long as the supplier allows it in this method
	block: Boolean

   	# Language to be used in request.
   	language : Language
}

# Criteria of search contains destination, travel dates and the number of pax in each room.
# You must preload the other fields in our system by complete the fields absents.
input HotelCriteriaSearchInput {
	# Check-in date for the booking.
	# Format: yyyy-MM-dd
	checkIn: Date!

	# Check-out, date for the booking.
	# Format: yyyy-MM-dd
	checkOut: Date!

	# Contains the list of hotels's ID.
	hotels: [String!]!

	# For multi room bookings, this array will contain multiple elements (rooms).
	# For each room you have to specify its own occupancy.
	occupancies: [RoomInput!]!

   	# Language to be used in request.
   	language : Language

	# Currency requested if supported by supplier.
	currency : Currency

	# Nationality of the guest (use ISO3166_1_alfa_2).
   	nationality : Country

   	# Targeted zone, country or point of sale to be used in request.
   	markets : [String!]
}

# Settings that you can edit for this avail. Values are loaded by default in our Back Office.
input HotelSettingsInput {
    # Indicates the context of the I/O codes (hotel, board, room and rates)
    context: String

    #Indicates if you want use context, or not, by default is true.
    useContext: Boolean

    # This field is got only if the authorization header is of the type JWT. It is used for to change the user that
    # has been set by default in the preload.
	connectUser: String,

   	# Milliseconds before the connection is closed.
   	timeout: Int

   	# Returns all the transactions exchanged with the supplier.
   	auditTransactions: Boolean

   	# Business rules.
   	businessRules: BusinessRulesInput

   	# Array of suppliers. Each one contains its own code, settings and accesses.
   	suppliers: [SupplierInput!]
}

# Parameters for additional information for the supplier's configuration.
input ParameterInput {
   	# Contains the keyword/Id to identify a parameter.
   	key: String!

   	# Contains the parameter values.
   	value: String!
}

# Pax object that contains the pax age.
input PaxInput {
	# Pax age.
	age: Int!
}

# Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
input PaymentCardInput {
    # Indicates the card type.
    cardType: String!

    # Contains owner's name
    holder: HolderInput!

    # Contains credit card number
    number: String!

    # Contains credit card CVC
    CVC: String!

    # Contains credit card expiration date
    expire: ExpireDateInput!
}

# Occupancy for a room. It contains a list of pax ages.
input RoomInput {
	# Array of pax ages. The number of items in the array will indicate the pax occupancy.
	paxes: [PaxInput!]!
}

# Contains the time out and business rules of a supplier or an access.
input SettingsBaseInput {
   	# Milliseconds before the connection is closed.
   	timeout: Int

   	# Specifies if transactions exchanged with the supplier have to be logged or not.
   	auditTransactions: Boolean

   	# Business rules.
   	businessRules: BusinessRulesInput
}

# Supplier object. Contains its own settings, code and access.
input SupplierInput {
   	# You can configure an special settings for any supplier. This level overwrites the avail settings level but not the
   	# access settings level.
   	settings: SettingsBaseInput

   	# Code that represents a supplier in our system.
   	# This information is mandatory.
   	code: String!

   	# Array of accesses that can overwrite an existing access information or include a new access for this avail.
   	accesses: [AccessInput!]
}

# Url's
input UrlsInput {
    # Specific Url for Availability method.
    search:         URI
    # Specific Url for Reservation method.
    quote:          URI
    # Specific Url for Valuation method.
    book:           URI
    # Supplier URL used for multiple methods.
    generic:        URI
}

# Extra information about the option.
type AddOns {
    # Extra information from the distribution layer
    distribute: JSON
}

# Data sent & received in the supplierâ€™s native format.
type AuditData {
    # List of transactions data.
    transactions:    [Transactions!]!

    # TimeStamp
    timeStamp:       DateTime!

    # Process time in milliseconds (ms)
    processTime:     Float!
}

# Contains information about a bed.
type Bed {
	# Specifies the bed type.
	type: String

	# Description about the bed.
	description: String

	# Indicates number of beds in the room.
	count: Int

	# Specifies if the bed is shared or not.
    shared: Boolean
}

# Returns detailed information about books.
type Booking {
    # Returns detailed information about books, you can indicated a list of locators or a range date.
    hotel(criteria: HotelCriteriaBookingInput!, settings: HotelSettingsInput): HotelBooking
}

type BookingHotel {
    # Creation date of the booking.
    # Format: yyyy-MM-dd
    creationDate: Date

    # Check-in date for the booking.
    # Format: yyyy-MM-dd
    checkIn: Date

    # Check-out date for the booking.
    # Format: yyyy-MM-dd
    checkOut: Date

    # Code of the hotel in the context selected.
    hotelCode: String

    # Name of the hotel.
    hotelName: String

    # Code of the board in the context selected.
    boardCode: String

    # List of occupancies of the request.
    occupancies: [Occupancy!]

    # List of rooms.
    rooms: [BookingRoom!]
}

type BookingRoom {
    # ID reference to the occupancy.
    occupancyRefId: Int

    # Indicates the room code.
    code: String

    # Description about the room.
    description: String

    # Total price for all days.
    price: Price
}

# Contains information about a cancel penalty.
type CancelPenalty implements Priceable {
	# Cancellation fees applicable x number of hours before the check in date.
	hoursBefore: Int!

	# Type of penalty. This can be Nights, Percent or Import.
	penaltyType: CancelPenaltyType!

	# Currency used in the cancel policy.
	currency: Currency!

	# Value of the cancel policy.
	value: Float!
}

# Contains information about a cancel policy.
type CancelPolicy {
	# Indicates if the option is refundable or not.
	# This information is mandatory.
	refundable: Boolean!

	# List of cancel penalties.
	cancelPenalties: [CancelPenalty!]
}

# Contains information about the commission price.
type CommissionPrice implements Priceable {
	# Specifies the currency.
	# This information is mandatory.
	currency: Currency!

	# Specifies the import.
	# This information is mandatory.
	value: Float!

	# If binding is set as true, then the client canâ€™t sell the product for a lower price then the one set by the supplier. If it set as as false, the client can sell the product for a lower price.
	# This information is mandatory.
	binding: Boolean!

	# Percentage of the commission applied to the amount.
	commissionPercentage: Float

	# Specifies the commission amount.
	commissionAmount: Float
}

# Criteria of search contains destination, travel dates and the number of pax in each room.
type CriteriaSearch {
	# Check-in date for the booking.
	# Format: yyyy-MM-dd
	checkIn: Date!

	# Check-out, date for the booking.
	# Format: yyyy-MM-dd
	checkOut: Date!

	# Contains the list of hotels's ID.
	hotels: [String!]!

	# For multi room bookings, this array will contain multiple elements (rooms).
	# For each room you have to specify its own occupancy.
	occupancies: [RoomCriteria!]!

   	# Language to be used in request.
   	language : Language

	# Currency requested if supported by supplier.
	currency : Currency

	# Nationality of the guest (use ISO3166_1_alfa_2).
   	nationality : Country

   	# Targeted zone, country or point of sale to be used in request.
   	markets : [String!]
}

# Application errors
type Error implements AdviseMessage {
    # Error code
    code: String!

    # Error type
    type: String!

    # Error description
    description : String!
}

# Holder object that contains the pax name and surname.
type Holder {
	# Holder's name
	name: String!

	# Holder's surname
	surname: String!
}

type HotelBookPayload implements Response {
    # Application stats in string format
    stats(token: String!): RequestStats

    # Data sent & received in the supplierâ€™s native format.
    auditData: AuditData

    # Information about booking
    booking: HotelBookingDetail

    # Errors that will lead the service to abort
    errors: [Error!]

    # Potentially  harmful situations or errors that won't force the service to abort
    warnings: [Warning!]
}

type HotelBooking implements Response {
    # Application stats in string format
    stats(token: String!): RequestStats

    # Data sent & received in the supplierâ€™s native format.
    auditData: AuditData

    # Details about booking
    bookings: [HotelBookingDetail!]

    # Errors that will lead the service to abort
    errors: [Error!]

    # Potentially  harmful situations or errors that won't force the service to abort
    warnings: [Warning!]
}

# Contains information about booking.
type HotelBookingDetail {
	# Booking ID in the SupplierÂ´s system
	reference: Reference!

	# Holder's name and surname
	holder: Holder

	# Information about the hotel.
	hotel: BookingHotel

    # Specifies the prices (Gross, Net and Amount) of the option returned.
    price: Price

    # Specifies cancel policies of the book returned.
	cancelPolicy: CancelPolicy

    # Additional information about the book.
    remarks: String

	# Booking Status.
    status: BookStatusType!

    # Payable.
    payable: String
}

# Contains information about cancel
type HotelCancelDetail {
    # Booking ID in the SupplierÂ´s system
    reference: Reference

    # Cancellation ID in the SupplierÂ´s system
    cancelReference: String

    # Booking Status.
    status: BookStatusType

    # Specifies the prices (Gross, Net and Amount) of the cancellation.
    price: Price

    # Information about the booking.
    booking: HotelBookingDetail
}

type HotelCancelPayload implements Response {
    # Application stats in string format
    stats(token: String!): RequestStats

    # Data sent & received in the supplierâ€™s native format.
    auditData: AuditData

    #Information about cancel
    cancellation: HotelCancelDetail

    # Errors that will lead the service to abort
    errors: [Error!]

    # Potentially  harmful situations or errors that won't force the service to abort
    warnings: [Warning!]
}

# Contains information about quote.
type HotelOptionQuote {
    # Indicates the valuation key
    optionRefId: String!

    # The possible values in status in response are Available (OK) or On Request (RQ).
    status: StatusType!

    # Specifies the prices (Gross, Net and Amount) of the option returned.
    price: Price!

    # Specifies cancel policies of the option returned.
    cancelPolicy: CancelPolicy!

    # Additional information about the option.
    remarks: String

    # List of surcharges of the option returned.
    surcharges: [Surcharge!]

    # List of credit cards
    cardTypes: [String!]
}

# An option includes hotel information, meal plan, total price, conditions and room description.
type HotelOptionSearch implements BookableOptionSearch {
	# Supplier that offers this option.
	supplierCode: String!

	# Access code of this option.
    accessCode: String!

   	# Market of this option.
    markets: [String!]

    # Code of the hotel in the context selected.
	hotelCode: String!

    # Name of the hotel.
	hotelName: String

	# Code of the board in the context selected.
	boardCode: String!

	# Indicates the payment type of the option returned. Possible options: Merchant, Direct, Card Booking, Card check in and Mixed.
	paymentType: PaymentType!

	# The possible values in status in response are Available (OK) or On Request (RQ).
	status: StatusType!

	# List of occupancies of the request.
	occupancies: [Occupancy!]!

	# List of rooms of the option returned.
	rooms: [Room!]!

	# Specifies the prices (Gross, Net and Amount) of the option returned.
	price: Price!

	# List of supplements of the option returned.
	supplements: [Supplement!]

	# List of surcharges of the option returned.
	surcharges: [Surcharge!]

	# Specifies rate rules of the option returned.
	rateRules: [RateRulesType!]

	# Specifies cancel policies of the option returned.
	cancelPolicy: CancelPolicy

	# Additional information about the option.
	remarks: String

	# Extra information about the option.
	addOns: AddOns

	# Token for Deep Link
	token: String!

	# Indicates the quote key
	id: String!
}

type HotelQuote implements Response {
    # Application stats in string format
    stats(token: String!): RequestStats

    # Data sent & received in the supplierâ€™s native format.
    auditData: AuditData

    # Information about quote.
    optionQuote: HotelOptionQuote

    # Errors that will lead the service to abort
    errors: [Error!]

    # Potentially  harmful situations or errors that won't force the service to abort
    warnings: [Warning!]
}

# Results of Avail Hotel. Contains all the available options for a given date and itinerary.
type HotelSearch implements Response {
	# Indicates the context of the response.
	context: String

	# Application stats in string format
    stats(token: String!): RequestStats

    # Data sent & received in the supplierâ€™s native format.
    auditData: AuditData

    # Request Criteria
    requestCriteria: CriteriaSearch!

	# List of options returned according to the request.
    options: [HotelOptionSearch!]

	# Errors that will lead the service to abort
    errors: [Error!]

    # Potentially harmful situations or errors that won't force the service to abort
    warnings: [Warning!]
}

# Price taking any applicable discounts and surcharges into account.
type NetPrice implements Priceable {
	# Specifies the currency.
	currency: Currency!

	# Specifies the import.
	value: Float!

	# If binding is set as true, then the client canâ€™t sell the product for a lower price then the one set by the supplier. If it set as as false, the client can sell the product for a lower price.
	binding: Boolean!
}

# Information about occupancy.
type Occupancy {
	# Unique ID room in this option.
	id: Int!

	# List of pax of this occupancy.
	paxes: [Pax!]!
}

# Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
type Pax {
	# Specifies the age pax.
	age: Int!
}

# A price represented in different ways
type Price {
	# The value of this price includes the comission that the seller will earn.
	# Doesn't take any possible discounts and surcharges into account.
	gross: CommissionPrice

	# Net Price is the amount to pay to the supplier,
	# Takes any applicable discounts and surcharges into account.
	net: NetPrice

	# A price in which is not know if it is net or gross. It is defined by contract between the seller and the supplier.
	amount: CommissionPrice
}

# Information about daily price.
type PriceBreakdown {
	# Start date in which the price becomes effective.
	effectiveDate: Date!

	# Expire date of price.
	expireDate: Date!

	# Specifies the daily price.
	price: Price!
}

# Information about room promotions(offers).
type Promotion {
	# Specifies the promotion code.
	code: String!

	# Specifies the promotion name.
	name: String

	# Promotion effective date.
    effectiveDate: Date

    # Promotion expire date.
    expireDate: Date
}

# Returns the total price and cancellation policies of the Option selected in the previous step (Search).
type Quote {
    # Returns the total price and cancellation policies of the Option selected in the previous step (Search).
    hotel(criteria: HotelCriteriaQuoteInput!, settings: HotelSettingsInput): HotelQuote
}


# Information about the rate of the option returned.
type RatePlan {
    # Specifies the rate code.
    code: String!

    # Specifies the rate name.
    name: String

	# Start date in which the rate becomes effective.
    effectiveDate: Date

    # Expire date of the rate.
    expireDate: Date
}

# Contains reference codes.
type Reference {
    # Client reference booking
    client: String

    # Supplier reference booking
    supplier: String
}

# Contains information about the Resort.
type Resort {
	# Specifies the resort code.
	code: String!

	# Specifies the resort name.
    name: String

    # Specifies the resort description.
    description: String
}

# Contains the room information of the option returned.
type Room {
	# ID reference to the occupancy.
	occupancyRefId: Int!

	# Indicates the room code.
	code: String!

	# Description about the room.
	description: String

	# Identifies if the room is refundable or not.
	refundable: Boolean

	# Number of rooms available with the same type.
	units: Int

	# Specifies the room price.
	roomPrice: RoomPrice!

	# List of beds.
	beds: [Bed!]

	# Daily break downs rate plan.
    ratePlans: [RatePlan!]

    # Daily break downs promotions.
    promotions: [Promotion!]
}

# Occupancy for a room. It contains a list of pax ages.
type RoomCriteria {
	# Array of pax ages. The number of items in the array will indicate the pax occupancy.
	paxes: [Pax!]!
}

# Specifies the room price.
type RoomPrice {
    # Total price for all days.
    price: Price!

    # Daily break downs price.
    breakdown: [PriceBreakdown!]
}

# Available options for a given date and itinerary. It does not filter different classes, times or
# fares. It will always retrieve all results returned by the suppliers. The availability request is very straight
# forward.
type Search {
	# Available options of an hotel for a given date and itinerary. It does not filter different classes, times or
	# fares. It will always retrieve all results returned by the suppliers. The availability request is very straight
	# forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room).
	# But you must preload the other fields in our system by complete the fields absents.
	hotel(token: String, criteria: HotelCriteriaSearchInput, settings: HotelSettingsInput, filter: FilterInput): HotelSearch
}

# Indicates the status of the service
type ServiceStatus implements AdviseMessage  {
    # Status code
    code: String!

    # Status type
    type: String!

    # Status description
    description : String!
}

type Stat {
    # Start UTC
    start:      DateTime!
    # End UTC
    end:        DateTime!
    # Difference between start and end in miliseconds
    duration:   Float
}




type StatAccess {
    name:                   String!
    total:                  Stat!
    staticConfiguration:    Stat
    transactions:           [StatTransaction!]!
    external:               String!
}




type StatTransaction {
    reference:              String!
    total:                  Stat!
    buildRequest:           Stat!
    workerCommunication:    Stat!
    parseResponse:          Stat!
}




# Contains internal information.
type RequestStats {
	total:          Stat!
    validation:     Stat!
    process:        Stat!
    Accesses:       [StatAccess!]!
    External:       String!
}

# Supplement that it can be added to the option returned. Contains all the information about the supplement.
type Supplement {
    # Specifies the supplement code.
    code: String!

    # Specifies the supplement name.
    name: String

    # Specifies the supplement description.
    description: String

    # Indicates the supplement type. Possible types: Fee, Ski_pass, Lessons, Meals, Equipment, Ticket, Transfers, Gla, Activity or Null.
    supplementType: SupplementType!

    # Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand.
	# Possible charge types: Include or Exclude.
    chargeType: ChargeType!

    # Indicates if the supplement is mandatory or not.
    mandatory: Boolean!

    # Specifies the duration type. Possible duration types: Range (specified dates) or Open. This field is mandatory for PDI.
    durationType: DurationType

    # Indicates the quantity of field in the element â€œunitâ€.
    quantity: Int

    # Indicates the unit type. Possible unit types: Day or Hour.
    unit: UnitTimeType

    # Indicates the effective date of the supplement.
    effectiveDate: Date

    # Indicates the expire date of the supplement.
    expireDate: Date

    # Contains information about the resort
    resort: Resort

    # Indicates the supplement price.
    price: Price
}

# Surcharge that it can be added to the option returned. Contains all the information about the surcharge.
type Surcharge {
    # Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand.
	# Possible charge types: Include or Exclude.
    chargeType: ChargeType!

    # Indicates the surcharge price.
    price: Price!

    # Specifies the surcharge description.
    description: String
}

# Supplier transaction
type Transactions {
    # Transaction Request.
    request:        String!

    # Transaction Response.
	response:       String!

	# Time when the request has been processed.
	timeStamp:      DateTime!
}

# Application warnings
type Warning implements AdviseMessage {
    # Warning code
    code: String!

    # Warning type
    type: String!

    # Warning description
    description : String!
}

# Book status
enum BookStatusType {
	# The status of the booking is available
	OK

	# The status of the booking is KO
	KO

	# The status of the booking is on request
	ON_REQUEST

	# The status of the booking is cancelled
	CANCELLED

	# The status of the booking is unknown
	UNKNOWN
}

# Indicates the type of criteria in the request of the booking list
enum BookingCriteriaType {
    # Search by date range
    DATES

    # Search by reference codes
    REFERENCES
}


# Business rules type
enum BusinessRulesType {
   	# The cheapest options is returned without exceeding the optionsQuota limit.
   	CHEAPER_AMOUNT

   	# Groups the option by room type without exceeding the optionsQuota limit.
   	ROOM_TYPE

}

# Options type
enum CancelPenaltyType {
	# Indicates the number of nights to be penalized.
	NIGHTS

	# Indicates the percentage to pay based on the option price.
	PERCENT

	# Indicates the exact amount payable.
	IMPORT
}

# Charge Type
enum ChargeType {
   	# The charge is included.
   	INCLUDE

   	# The charge is excluded.
   	EXCLUDE
}

# Indicates the type of dates
enum DateType {
    # Arrival Date
    ARRIVAL

    # Booking Creation
    BOOKING
}

# Duration Type
enum DurationType {
	# Date range is set.
	RANGE

	# Not restricted by date.
   	OPEN
}

# Options payment type
enum PaymentType {
	# The payment is managed by the supplier.
	MERCHANT

	# The payment is made straight to the actual payee, without sending it through an intermediary or a third party.
	DIRECT

	# The payment is managed by the supplier. The payment is effectuated at the time of booking.
    CARD_BOOKING

    # The payment is managed by the supplier. The payment is effectuated at check in in the hotel.
    CARD_CHECK_IN
}

# Price Type
enum PriceType {
	# Price without deductions.
	GROSS

	# Price after deducting all discounts and rebates.
	NET

	# Final quantity. Sum of multiple quantities.
	AMOUNT
}

# Rate Rules
enum RateRulesType {
	# The product canâ€™t be sold separately from another product attached to it, such as a flight.
	PACKAGE

	# Options that can only be sold to people who are 55 and older.
	OLDER55

	# Options that can only be sold to people who are 60 and older.
	OLDER60

	# Options that can only be sold to people who are 65 and older.
	OLDER65

	# The rate CanaryResident is applicable to Canary Islands residents only.
	CANARY_RESIDENT

	# The rate BalearicResident is applicable to Balearic Islands residents only.
	BALEARIC_RESIDENT

	# The rate largeFamily is applied to large families and is determined by each supplier
	LARGE_FAMILY

	# The rate honeymoon is applied to those who just got married and is determined by each supplier.
	HONEYMOON

    # The rate publicServant is applicable to public servants only.
	PUBLIC_SERVANT

	# The rate unemployed is applied to those without work.
	UNEMPLOYED
}

# Service Type
enum ServiceType {
	# A ticket or pass authorizing the holder to ski in a certain place or resort. Gross.
	SKI_PASS
}

# Options status
enum StatusType {
	# The status of the avail is available
	OK

	# The status of the avail is On request
	RQ
}

# Supplement Type
enum SupplementType {
	# A ticket or pass authorizing the holder to ski in a certain place or resort.
	SKI_PASS

	# Lessons of any type that the costumer can take.
	LESSONS

	# Supplement of a determined meal plan.
	MEALS

	# Extra equipment for a specific purpose.
	EQUIPMENT

	# Admission to some service.
	TICKET

	# Transfers used by the costumer.
	TRANSFERS

	# Gala: A festive occasion, celebration or special entertainment.
	GALA

	# Activities that the costumer can do.
	ACTIVITY
}


# Unit Time Type
enum UnitTimeType {
   	# Day
   	DAY

   	# Hour
   	HOUR
}

